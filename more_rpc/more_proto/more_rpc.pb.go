// Code generated by protoc-gen-go. DO NOT EDIT.
// source: more_rpc.proto

package moreRpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Data struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	CommitID             int64    `protobuf:"varint,3,opt,name=commitID,proto3" json:"commitID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_196f4518da60af7b, []int{0}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Data) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Data) GetCommitID() int64 {
	if m != nil {
		return m.CommitID
	}
	return 0
}

type CommitIDMsg struct {
	CommitID             int64    `protobuf:"varint,4,opt,name=CommitID,proto3" json:"CommitID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitIDMsg) Reset()         { *m = CommitIDMsg{} }
func (m *CommitIDMsg) String() string { return proto.CompactTextString(m) }
func (*CommitIDMsg) ProtoMessage()    {}
func (*CommitIDMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_196f4518da60af7b, []int{1}
}

func (m *CommitIDMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitIDMsg.Unmarshal(m, b)
}
func (m *CommitIDMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitIDMsg.Marshal(b, m, deterministic)
}
func (m *CommitIDMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitIDMsg.Merge(m, src)
}
func (m *CommitIDMsg) XXX_Size() int {
	return xxx_messageInfo_CommitIDMsg.Size(m)
}
func (m *CommitIDMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitIDMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CommitIDMsg proto.InternalMessageInfo

func (m *CommitIDMsg) GetCommitID() int64 {
	if m != nil {
		return m.CommitID
	}
	return 0
}

func init() {
	proto.RegisterType((*Data)(nil), "moreRpc.Data")
	proto.RegisterType((*CommitIDMsg)(nil), "moreRpc.CommitIDMsg")
}

func init() { proto.RegisterFile("more_rpc.proto", fileDescriptor_196f4518da60af7b) }

var fileDescriptor_196f4518da60af7b = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcd, 0x2f, 0x4a,
	0x8d, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0xf1, 0x83, 0x0a,
	0x92, 0x95, 0xbc, 0xb8, 0x58, 0x5c, 0x12, 0x4b, 0x12, 0x85, 0x04, 0xb8, 0x98, 0xbd, 0x53, 0x2b,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x11, 0x2e, 0xd6, 0xb0, 0xc4, 0x9c,
	0xd2, 0x54, 0x09, 0x26, 0xb0, 0x18, 0x84, 0x23, 0x24, 0xc5, 0xc5, 0x91, 0x9c, 0x9f, 0x9b, 0x9b,
	0x59, 0xe2, 0xe9, 0x22, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0xe7, 0x2b, 0x69, 0x72, 0x71,
	0x3b, 0x43, 0xd9, 0xbe, 0xc5, 0xe9, 0x20, 0xa5, 0x30, 0xae, 0x04, 0x0b, 0x44, 0x29, 0x8c, 0x6f,
	0xd4, 0xca, 0xc4, 0xc5, 0xe3, 0x0b, 0x71, 0x42, 0x00, 0xd8, 0x41, 0x5a, 0x5c, 0x1c, 0x9e, 0x79,
	0xee, 0xa9, 0x25, 0x20, 0x9b, 0x79, 0xf5, 0xa0, 0xae, 0xd3, 0x03, 0x39, 0x4d, 0x0a, 0x95, 0xab,
	0xc4, 0x20, 0xa4, 0xc3, 0xc5, 0xe5, 0x99, 0x17, 0x9c, 0x5a, 0x02, 0x71, 0x11, 0x21, 0xd5, 0xba,
	0x5c, 0x9c, 0x30, 0x93, 0x8b, 0x09, 0x29, 0x36, 0x60, 0x14, 0x32, 0xe3, 0x62, 0x83, 0xb8, 0x52,
	0x48, 0x04, 0x2e, 0x89, 0xe4, 0x2b, 0x29, 0xac, 0xa2, 0x4a, 0x0c, 0x42, 0x26, 0x5c, 0x2c, 0x2e,
	0x45, 0xf9, 0x05, 0xa4, 0xe9, 0x72, 0xd2, 0xe0, 0x12, 0xcb, 0xcc, 0xd7, 0x4b, 0x07, 0x45, 0x4c,
	0x6a, 0x45, 0x62, 0x6e, 0x41, 0x4e, 0x6a, 0xb1, 0x5e, 0x55, 0x62, 0x72, 0x46, 0xaa, 0x13, 0x4a,
	0xf0, 0x04, 0x30, 0x26, 0xb1, 0x81, 0x23, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x9e,
	0x62, 0x26, 0xca, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MoreRpcProtoClient is the client API for MoreRpcProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoreRpcProtoClient interface {
	// 获取单个value
	InGetKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 设置key/value
	InSetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// 获取全部key/value
	InGetKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (MoreRpcProto_InGetKeysClient, error)
	// 提交事务
	Commit(ctx context.Context, in *CommitIDMsg, opts ...grpc.CallOption) (*CommitIDMsg, error)
	// 丢弃事务
	Drop(ctx context.Context, in *CommitIDMsg, opts ...grpc.CallOption) (*CommitIDMsg, error)
}

type moreRpcProtoClient struct {
	cc *grpc.ClientConn
}

func NewMoreRpcProtoClient(cc *grpc.ClientConn) MoreRpcProtoClient {
	return &moreRpcProtoClient{cc}
}

func (c *moreRpcProtoClient) InGetKey(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/moreRpc.MoreRpcProto/InGetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moreRpcProtoClient) InSetValue(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/moreRpc.MoreRpcProto/InSetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moreRpcProtoClient) InGetKeys(ctx context.Context, in *Data, opts ...grpc.CallOption) (MoreRpcProto_InGetKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MoreRpcProto_serviceDesc.Streams[0], "/moreRpc.MoreRpcProto/InGetKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &moreRpcProtoInGetKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MoreRpcProto_InGetKeysClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type moreRpcProtoInGetKeysClient struct {
	grpc.ClientStream
}

func (x *moreRpcProtoInGetKeysClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *moreRpcProtoClient) Commit(ctx context.Context, in *CommitIDMsg, opts ...grpc.CallOption) (*CommitIDMsg, error) {
	out := new(CommitIDMsg)
	err := c.cc.Invoke(ctx, "/moreRpc.MoreRpcProto/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moreRpcProtoClient) Drop(ctx context.Context, in *CommitIDMsg, opts ...grpc.CallOption) (*CommitIDMsg, error) {
	out := new(CommitIDMsg)
	err := c.cc.Invoke(ctx, "/moreRpc.MoreRpcProto/Drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoreRpcProtoServer is the server API for MoreRpcProto service.
type MoreRpcProtoServer interface {
	// 获取单个value
	InGetKey(context.Context, *Data) (*Data, error)
	// 设置key/value
	InSetValue(context.Context, *Data) (*Data, error)
	// 获取全部key/value
	InGetKeys(*Data, MoreRpcProto_InGetKeysServer) error
	// 提交事务
	Commit(context.Context, *CommitIDMsg) (*CommitIDMsg, error)
	// 丢弃事务
	Drop(context.Context, *CommitIDMsg) (*CommitIDMsg, error)
}

func RegisterMoreRpcProtoServer(s *grpc.Server, srv MoreRpcProtoServer) {
	s.RegisterService(&_MoreRpcProto_serviceDesc, srv)
}

func _MoreRpcProto_InGetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoreRpcProtoServer).InGetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreRpc.MoreRpcProto/InGetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoreRpcProtoServer).InGetKey(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoreRpcProto_InSetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoreRpcProtoServer).InSetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreRpc.MoreRpcProto/InSetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoreRpcProtoServer).InSetValue(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoreRpcProto_InGetKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MoreRpcProtoServer).InGetKeys(m, &moreRpcProtoInGetKeysServer{stream})
}

type MoreRpcProto_InGetKeysServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type moreRpcProtoInGetKeysServer struct {
	grpc.ServerStream
}

func (x *moreRpcProtoInGetKeysServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _MoreRpcProto_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoreRpcProtoServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreRpc.MoreRpcProto/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoreRpcProtoServer).Commit(ctx, req.(*CommitIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoreRpcProto_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitIDMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoreRpcProtoServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moreRpc.MoreRpcProto/Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoreRpcProtoServer).Drop(ctx, req.(*CommitIDMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _MoreRpcProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moreRpc.MoreRpcProto",
	HandlerType: (*MoreRpcProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InGetKey",
			Handler:    _MoreRpcProto_InGetKey_Handler,
		},
		{
			MethodName: "InSetValue",
			Handler:    _MoreRpcProto_InSetValue_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _MoreRpcProto_Commit_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _MoreRpcProto_Drop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InGetKeys",
			Handler:       _MoreRpcProto_InGetKeys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "more_rpc.proto",
}
